use crate::regex_engine::regex_ast::regex_exp::RegexExp;
use crate::regex_engine::regex_ast::bin_op::{BinOp, BinaryOperator};
use crate::regex_engine::regex_ast::un_op::{UnOp, UnaryOperator};
use crate::regex_engine::regex_ast::symbol::symbol::{MatchableSymbol, Symbol, SymbolSet};
use crate::regex_engine::regex_ast::symbol::char_set::CharSet;

grammar;

// Gram√°tica principal
pub Regex: RegexExp = {
    <u:Union> => u,
};

Union: RegexExp = {
    <l:Union> "|" <r:Concat> => RegexExp::BinOp(BinOp {
        left: Box::new(l),
        right: Box::new(r),
        op: BinaryOperator::Union,
    }),
    <c:Concat> => c,
};

Concat: RegexExp = {
    <l:Concat> <r:Unary> => RegexExp::BinOp(BinOp {
        left: Box::new(l),
        right: Box::new(r),
        op: BinaryOperator::Concat,
    }),
    <u:Unary> => u,
};

Unary: RegexExp = {
    <a:Unary> <op:UnOp> => RegexExp::UnOp(UnOp {
        operand: Box::new(a),
        op,
    }),
    <a:Atom> => a,
};

UnOp: UnaryOperator = {
    "*" => UnaryOperator::KleeneStar,
    "+" => UnaryOperator::Plus,
    "?" => UnaryOperator::Optional,
};

Atom: RegexExp = {
    <c:Char> => RegexExp::Atom(MatchableSymbol::Symbol(Symbol::Char(c))),
    "[" <neg:Negation?> <elems:RangeElems> "]" => RegexExp::Atom(MatchableSymbol::SymbolSet(
        SymbolSet::CharSet(CharSet::new(vec![], elems, neg.is_some()))
    )),
    <c:Escapable> => RegexExp::Atom(MatchableSymbol::Symbol(Symbol::from(c))),
    "(" <r:Regex> ")" => r,
    "." => RegexExp::Atom(MatchableSymbol::SymbolSet(SymbolSet::Dot)),
};

RangeElems: Vec<(char, char)> = {
    <start:Char> "-" <end:Char> => vec![(start, end)],
    <start:Char> "-" <end:Char> <rest:RangeElems> => {
        let mut ranges = vec![(start, end)];
        ranges.extend(rest);
        ranges
    },
};

Escapable: char = {
    "\\|" => '|',
    "\\[" => '[',
    "\\]" => ']',
    "\\-" => '-',
    "\\(" => '(',
    "\\)" => ')',
    "\\" => '\\',
    "\\." => '.',
    "\\*" => '*',
    "\\+" => '+',
    "\\?" => '?',
    "\\^" => '^',
    "\\t" => '\t',
    "\\n" => '\n',
    "\\r" => '\r',
    "\\s" => ' ',        // Space
};

Negation: () = {
    "^" => (),
}

Char: char = {
    <c:r"."> => c.chars().next().unwrap(),
};

