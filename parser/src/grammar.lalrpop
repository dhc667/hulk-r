use ast;
use ast::tokens;
use crate::parsing_helpers;
use ast::typing;

grammar;

pub Program: ast::Program = {
    InstructionList => parsing_helpers::program_from_instructions(<>),
}

InstructionList: Vec<parsing_helpers::Instruction> = {
    <mut h:InstructionList> <i:Instruction> => {
        h.push(i);
        h
    },
    <i:Instruction> => {
        let mut h: Vec<parsing_helpers::Instruction> = Vec::new();
        h.push(i);
        h
    }
}

Instruction: parsing_helpers::Instruction = {
    Definition => parsing_helpers::Instruction::from(<>),
    <x:Expression> ";" => parsing_helpers::Instruction::from(x),
}

Definition: ast::Definition = {
    TypeDef => ast::Definition::from(<>),
    ProtocolDef => ast::Definition::from(<>),
    GlobalFunctionDef => ast::Definition::from(<>),
    ConstantDef => ast::Definition::from(<>),
}

TypeDef: ast::TypeDef = {
    <k:TypeKeyword> <n:TypeName> <p:Parameters?> <i:InheritanceIndicator?> "{" 
        <c:TypeMemberCollection?>
    "}" => {
        let c = match c {
            None => parsing_helpers::TypeMemberCollector::new(),
            Some(c) => c,
        };

        let p = match p {
            Some(p) => p,
            None => Vec::new()
        };

        ast::TypeDef::new(k, n, p, i, c.data_member_defs, c.function_member_defs)
    }
}

InheritanceIndicator: ast::InheritanceIndicator = {
    <k:InheritsKeyword> <n:TypeName> <l:Arguments?> => {
            ast::InheritanceIndicator::new(k, n, match l {
                Some(l) => l,
                None => Vec::new(),
            })
        }
}

Parameters: Vec<tokens::Identifier> = {
    "(" <l:ParameterList?> ")" => {
        match l {
            Some(l) => l,
            None => {
                let v: Vec<tokens::Identifier> = Vec::new();
                v
            }
        }
    },
}

Arguments: Vec<ast::Expression> = {
    "(" <l:ArgumentList?> ")" => {
        match l{
            Some(l) => l,
            None => {
                let v: Vec<ast::Expression> = Vec::new();
                v
            }
        }
    },
}

TypeMemberCollection: parsing_helpers::TypeMemberCollector = {
    <mut h:TypeMemberCollection> <m:MemberDef> => {
        h.add_member_def(m);
        h
    },
    <m:MemberDef> => {
        let mut h = parsing_helpers::TypeMemberCollector::new();
        h.add_member_def(m);
        h
    },
}

MemberDef: parsing_helpers::MemberDef = {
    MemberFunctionDef => parsing_helpers::MemberDef::from(<>),
    DataMemberDef => parsing_helpers::MemberDef::from(<>),
}

MemberFunctionDef: ast::FunctionDef = {
    <mut id:Identifier> <p:Parameters> <t:TypeAnnotation?> <a:ArrowExpression> ";" => {
        if let Some(ty) = t {
            id.annotate_type(ty);
        };
        ast::FunctionDef::new(id, p, ast::FunctionBody::from(a))
    },
    <mut id:Identifier> <p:Parameters> <t:TypeAnnotation> <b:Block> => {
        id.annotate_type(t);
        ast::FunctionDef::new(id, p, ast::FunctionBody::from(b))
    },
}

DataMemberDef: ast::DataMemberDef = {
    <a:Assignment> ";"
        => ast::DataMemberDef::from(a)
}

ProtocolDef: ast::ProtocolDef = {
    <k:ProtocolKeyword> <n:TypeName> <x:ExtensionIndicator?> "{"
        <l:FunctionSignatureList>
    "}" => ast::ProtocolDef::new(k, n, x, l),
}

ExtensionIndicator: ast::ExtensionIndicator = {
    <x:ExtendsKeyword> <n:TypeName>
        => ast::ExtensionIndicator::new(x, n),
}

FunctionSignatureList: Vec<ast::FunctionSignature> = {
    <mut h:FunctionSignatureList> <s:FunctionSignature> ";" => {
        h.push(s);
        h
    },
    <s:FunctionSignature> ";" => {
        let mut l = Vec::new();
        l.push(s);
        l
    },
}

FunctionSignature: ast::FunctionSignature = {
    <mut id:Identifier> <p:Parameters> <n:TypeAnnotation> => {
        id.annotate_type(n);
        ast::FunctionSignature::new(id, p)
    }
}

GlobalFunctionDef: ast::GlobalFunctionDef = {
    <k:FunctionKeyword> <s:FunctionSignature> <b:GlobalFunctionDefBody>
        => ast::GlobalFunctionDef::from_signature_and_body(k, s, b),
}

GlobalFunctionDefBody: ast::FunctionBody = {
    Block => ast::FunctionBody::from(<>),
    <x:ArrowExpression> ";" => ast::FunctionBody::from(x),
}

ParameterList: Vec<ast::Identifier> = {
    <mut h:ParameterList> "," <mut id:Identifier> <t:TypeAnnotation> => {
        id.annotate_type(t);
        h.push(id);
        h
    },
    <mut id:Identifier> <t:TypeAnnotation> => {
        id.annotate_type(t);

        let mut h = Vec::new();
        h.push(id);
        h
    },
}

ArgumentList: Vec<ast::Expression> = {
    <mut h:ArgumentList> "," <x:Expression> => {
        h.push(x);
        h
    },
    <x:Expression> => {
        let mut h = Vec::new();
        h.push(x);
        h
    },
}

ArrowExpression: ast::ArrowExpression = {
    <o:ArrowOp> <x:Expression> => 
        ast::ArrowExpression::new(o, x),
}

ConstantDef: ast::ConstantDef = {
    <k:ConstantKeyword> <id:Identifier> <t:TypeAnnotation> <o:AssignOp> <x:Expression> ";" 
        => ast::ConstantDef::new(k, t, id, o, x),
}

TypeAnnotation: typing::Type = {
    ":" <t:Type> => t,
}

Type: typing::Type = {
    <t:Type> "*" => typing::Type::Iterable(Box::new(t)),
    BuiltInType => typing::Type::from(<>),
    TypeName => typing::Type::from(<>),
}


MultipleSemicolons: u32 = {
    <h: MultipleSemicolons> ";"
        => h + 1,
    <n: ";">
        => 1,
}

pub Expression: ast::Expression = {
    DestructiveAssignment => ast::Expression::from(<>),
    LogicalOr => ast::Expression::from(<>),
}

DestructiveAssignment: ast::DestructiveAssignment = {
    <l:Atom> <o:ColonAssignOp> <r:Expression>
        => ast::DestructiveAssignment::new(l, o, r),
}


LogicalOr: ast::Expression = {
    <x:LogicalOr> <o:LogicalOrOperator> <y:LogicalAnd>
        => ast::Expression::from(ast::BinOp::new(x, o, y)),
    LogicalAnd
}

LogicalAnd: ast::Expression = {
    <x:LogicalAnd> <o:LogicalAndOperator> <y:Equation>
        => ast::Expression::from(ast::BinOp::new(x, o, y)),
    Equation
}

Equation: ast::Expression = {
    <x:Comparison> <o:EqIneqOp> <y:Comparison>
        => ast::Expression::from(ast::BinOp::new(x, o, y)),
    Comparison
}


Comparison: ast::Expression = {
    <x:Addition> <o:ComparisonOperator> <y:Addition>
        => ast::Expression::from(ast::BinOp::new(x, o, y)),
    Addition
}


Addition: ast::Expression = {
    <x:Addition> <o:PlusMinusBinaryOp> <y:Term>
        => ast::Expression::from(ast::BinOp::new(x, o, y)),
    Term
}


Term: ast::Expression = {
    <x:Term> <o:MultDivRemOp> <y:Factor>
        => ast::Expression::from(ast::BinOp::new(x, o, y)),
    Factor
}


Factor: ast::Expression = {
    UnaryOperation => ast::Expression::from(<>),
}

UnaryOperation: ast::Expression = {
     <o:PlusMinusUnaryOp> <x:UnaryOperation>
        => ast::Expression::from(ast::UnOp::new(o, x)),
    CompositeExpression => ast::Expression::from(<>),
}

CompositeExpression: ast::Expression = {
    LetExpression => ast::Expression::from(<>),
    IfExpression => ast::Expression::from(<>),
    WhileExpression => ast::Expression::from(<>),
    ForExpression => ast::Expression::from(<>),
    Atom
}


LetExpression: ast::LetIn = {
    <k: LetKeyword> <a:AssignmentList> <i:InKeyword> <e:CompositeExpression>
        => ast::LetIn::new(k, a, i, e),
}

AssignmentList: Vec<ast::Assignment> = {
    <mut h:AssignmentList> "," <t:Assignment>
        => {
            h.push(t);
            h
        },
    <t:Assignment>
        => {
            let mut v = Vec::new();
            v.push(t);
            v
        },
}

Assignment: ast::Assignment = {
    <mut id:Identifier> <t:TypeAnnotation?> <o:AssignOp> <e:Expression> => {
        if let Some(ty) = t {
            id.annotate_type(ty);
        }

        ast::Assignment::new(id, o, e)
    },
}

IfExpression: ast::IfElse = {
    <k:IfKeyword> "(" <c:Expression> ")" <x:CompositeExpression> <k2:ElseKeyword> <x2:CompositeExpression> 
        => ast::IfElse::new(k, c, x, k2, x2),
}

WhileExpression: ast::While = {
    <k:WhileKeyword> "(" <c:Expression> ")" <b:Block>
        => ast::While::new(k, c, b),
}

ForExpression: ast::For = {
    <k:ForKeyword> "(" <e:Identifier> <i:InKeyword> <x:Expression> ")" <b:Block>
        => ast::For::new(k, e, i, x, b),
}

Atom: ast::Expression = {
    "(" <x:Expression> ")" => x,
    NewExpression => ast::Expression::from(<>),
    FunctionCall => ast::Expression::from(<>),
    Block => ast::Expression::from(<>),

    FunctionMemberAccess => ast::Expression::from(<>),
    DataMemberAccess => ast::Expression::from(<>),
    ListIndexing => ast::Expression::from(<>),

    ListLiteral => ast::Expression::from(<>),
    NumberLiteral => ast::Expression::from(<>),
    BooleanLiteral => ast::Expression::from(<>),
    StringLiteral => ast::Expression::from(<>),
    Identifier => ast::Expression::from(<>),
}

NewExpression: ast::NewExpr = {
    <k:NewKeyword> <f:FunctionCall> 
        => ast::NewExpr::from_function_call(k, f)
}

FunctionCall: ast::FunctionCall = {
    <id:Identifier> <l:Arguments>
        => ast::FunctionCall::new(id, l),
}

FunctionMemberAccess: ast::FunctionMemberAccess = {
    <a:Atom> <o:DotOp> <f:FunctionCall>
        => ast::FunctionMemberAccess::new(a, o, f),
}

DataMemberAccess: ast::DataMemberAccess = {
    <a:Atom> <o:DotOp> <id:Identifier>
        => ast::DataMemberAccess::new(a, o, id),
}

ListIndexing: ast::ListIndexing = {
    <a:Atom> <l:OpenBracket> <i:Expression> <r:CloseBracket>
        => ast::ListIndexing::new(a, l, r, i),
}

ListLiteral: ast::ListLiteral = {
    <l:OpenBracket> <e:ArgumentList?> <r:CloseBracket>
        => ast::ListLiteral::new(l, r, match e {
            None => Vec::new(),
            Some(v) => v
        })
}

Block: ast::Block = {
    <k:OpenBrace> <e:BlockBody> <k2:CloseBrace> => {
        let (items, multiple_semicolons) = e;
        ast::Block::new(k, k2, items, multiple_semicolons)
    },
}


BlockBody: (Vec<ast::BlockBodyItem>, bool) = {
    <mut l:BlockBody> <x:BlockBodyItem> => {
        let (mut l, _) = l;
        let (x, semicolons) = x;
        l.push(x);
        (l, semicolons)
    },
    <x:BlockBodyItem> => {
        let mut l = Vec::new();
        let (x, semicolons) = x;
        l.push(x);
        (l, semicolons)
    },
}

BlockBodyItem: (ast::BlockBodyItem, bool) = {
    <x:Expression> <n: MultipleSemicolons> => {
        (ast::BlockBodyItem::from(x), n > 1)
    },
    <k:ReturnKeyword> <e:Expression> <n:MultipleSemicolons> => {
        let i = ast::ReturnStatement::new(k, e);
        (ast::BlockBodyItem::from(i), n > 1)
    }
}

ArrowOp: tokens::ArrowOperator = {
    <s: @L> "=>" <e: @R>
        => tokens::ArrowOperator::new(tokens::TokenPosition::new(s, e)),
}

ColonAssignOp: tokens::BinaryOperator = {
    <s: @L> ":=" <e: @R>
        => tokens::BinaryOperator::ColonEqual(tokens::TokenPosition::new(s, e)),
}

LogicalOrOperator: tokens::BinaryOperator = {
    <s: @L> "||" <e: @R>
        => tokens::BinaryOperator::Or(tokens::TokenPosition::new(s, e)),
}

LogicalAndOperator: tokens::BinaryOperator = {
    <s: @L> "&&" <e: @R>
        => tokens::BinaryOperator::And(tokens::TokenPosition::new(s, e)),
}

ComparisonOperator: tokens::BinaryOperator = {
    <s: @L> ">" <e: @R>
        => tokens::BinaryOperator::Greater(tokens::TokenPosition::new(s, e)),
    <s: @L> ">=" <e: @R>
        => tokens::BinaryOperator::GreaterEqual(tokens::TokenPosition::new(s, e)),
    <s: @L> "<" <e: @R>
        => tokens::BinaryOperator::Less(tokens::TokenPosition::new(s, e)),
    <s: @L> "<=" <e: @R>
        => tokens::BinaryOperator::LessEqual(tokens::TokenPosition::new(s, e)),
}

AssignOp: tokens::BinaryOperator = {
    <s: @L> "=" <e: @R>
        => tokens::BinaryOperator::Equal(tokens::TokenPosition::new(s, e)),
}

EqIneqOp: tokens::BinaryOperator = {
    <s: @L> "==" <e: @R>
        => tokens::BinaryOperator::EqualEqual(tokens::TokenPosition::new(s, e)),
    <s: @L> "!=" <e: @R>
        => tokens::BinaryOperator::NotEqual(tokens::TokenPosition::new(s, e))
}
PlusMinusBinaryOp: tokens::BinaryOperator = {
    <s: @L> "+" <e: @R>
        => tokens::BinaryOperator::Plus(tokens::TokenPosition::new(s, e)),
    <s: @L> "-" <e: @R>
        => tokens::BinaryOperator::Minus(tokens::TokenPosition::new(s, e)),
}

PlusMinusUnaryOp: tokens::UnaryOperator = {
    <s: @L> "+" <e: @R>
        => tokens::UnaryOperator::Plus(tokens::TokenPosition::new(s, e)),
    <s: @L> "-" <e: @R>
        => tokens::UnaryOperator::Minus(tokens::TokenPosition::new(s, e)),
    <s: @L> "!" <e: @R>
            => tokens::UnaryOperator::Not(tokens::TokenPosition::new(s, e)),
}


MultDivRemOp: tokens::BinaryOperator = {
    <s: @L> "*" <e: @R>
        => tokens::BinaryOperator::Times(tokens::TokenPosition::new(s, e)),
    <s: @L> "/" <e: @R>
        => tokens::BinaryOperator::Divide(tokens::TokenPosition::new(s, e)),
    <s: @L> "%" <e: @R>
        => tokens::BinaryOperator::Modulo(tokens::TokenPosition::new(s, e)),
}

DotOp: tokens::DotOperator = {
    <s: @L> "." <e: @R>
        => tokens::DotOperator::new(tokens::TokenPosition::new(s, e)),
}


OpenBrace: tokens::GroupingOperator = {
    <s: @L> "{" <e: @R>
        => tokens::GroupingOperator::OpenBrace(tokens::TokenPosition::new(s, e)),
}

CloseBrace: tokens::GroupingOperator = {
    <s: @L> "}" <e: @R>
        => tokens::GroupingOperator::CloseBrace(tokens::TokenPosition::new(s, e)),
}

OpenBracket: tokens::GroupingOperator = {
    <s: @L> "[" <e: @R>
        => tokens::GroupingOperator::OpenBracket(tokens::TokenPosition::new(s, e)),
}

CloseBracket: tokens::GroupingOperator = {
    <s: @L> "]" <e: @R>
        => tokens::GroupingOperator::CloseBracket(tokens::TokenPosition::new(s, e)),
}

BuiltInType: typing::BuiltInType = {
    "Object" => typing::BuiltInType::Object,
    "Number" => typing::BuiltInType::Number,
    "String" => typing::BuiltInType::String,
    "Boolean" => typing::BuiltInType::Bool,
}

NewKeyword: tokens::Keyword = {
    <s: @L> "new" <e: @R>
        => tokens::Keyword::New(tokens::TokenPosition::new(s, e)),
}

ReturnKeyword: tokens::Keyword = {
    <s: @L> "return" <e: @R>
        => tokens::Keyword::Return(tokens::TokenPosition::new(s, e)),
}

ExtendsKeyword: tokens::Keyword = {
    <s: @L> "extends" <e: @R>
        => tokens::Keyword::Extends(tokens::TokenPosition::new(s, e)),
}

InheritsKeyword: tokens::Keyword = {
    <s: @L> "inherits" <e: @R>
        => tokens::Keyword::Inherits(tokens::TokenPosition::new(s, e)),
}

LetKeyword: tokens::Keyword = {
    <s: @L> "let" <e: @R>
        => tokens::Keyword::Let(tokens::TokenPosition::new(s, e)),
}

InKeyword: tokens::Keyword = {
    <s: @L> "in" <e: @R>
        => tokens::Keyword::In(tokens::TokenPosition::new(s, e)),
}

IfKeyword: tokens::Keyword = {
    <s: @L> "if" <e: @R>
        => tokens::Keyword::If(tokens::TokenPosition::new(s, e)),
}

ElseKeyword: tokens::Keyword = {
    <s: @L> "else" <e: @R>
        => tokens::Keyword::Else(tokens::TokenPosition::new(s, e)),
}

ElifKeyword: tokens::Keyword = {
    <s: @L> "elif" <e: @R>
        => tokens::Keyword::Elif(tokens::TokenPosition::new(s, e)),
}

WhileKeyword: tokens::Keyword = {
    <s: @L> "while" <e: @R>
        => tokens::Keyword::While(tokens::TokenPosition::new(s, e)),
}

ForKeyword: tokens::Keyword = {
    <s: @L> "for" <e: @R>
        => tokens::Keyword::For(tokens::TokenPosition::new(s, e)),
}

TypeKeyword: tokens::Keyword = {
    <s: @L> "type" <e: @R>
        => tokens::Keyword::Type(tokens::TokenPosition::new(s, e)),
}

FunctionKeyword: tokens::Keyword = {
    <s: @L> "function" <e: @R>
        => tokens::Keyword::Function(tokens::TokenPosition::new(s, e)),
}

ProtocolKeyword: tokens::Keyword = {
    <s: @L> "protocol" <e: @R>
        => tokens::Keyword::Protocol(tokens::TokenPosition::new(s, e)),
}

ConstantKeyword: tokens::Keyword = {
    <s: @L> "constant" <e: @R>
        => tokens::Keyword::Constant(tokens::TokenPosition::new(s, e)),
}

Identifier: tokens::Identifier = {
    <s: @L> <i:r"[A-Za-z][A-Za-z_0-9]*"> <e: @R>
        => tokens::Identifier::new(s, e, i),
}

TypeName: tokens::TypeName = {
    <s: @L> <i:r"[A-Za-z][A-Za-z_0-9]*"> <e: @R>
        => tokens::TypeName::new(s, e, i.to_string()),
}

StringLiteral: tokens::StringLiteral = {
    <b: @L> <s:r#""(?:[^"\\]|\\.)*""#> <e: @R>
        => tokens::StringLiteral::new(b, e, s),
}


NumberLiteral: tokens::NumberLiteral = {
    <s: @L> <n:r"[0-9]+(\.[0-9]+)?"> <e: @R>
        => tokens::NumberLiteral::new(s, e, n),
}

BooleanLiteral: tokens::BooleanLiteral = {
    <s: @L> "true" <e: @R>
        => tokens::BooleanLiteral::new(s, e, true),
    <s: @L> "false" <e: @R>
        => tokens::BooleanLiteral::new(s, e, false),
}
