use ast;
use ast::tokens;

grammar;

pub Program: ast::Program = {
    <x:ExpressionList> => {
        ast::Program::new(x)
    },
}

pub ExpressionList: ast::ExpressionList = {
    <l:ExpressionList> <x:SemicolonExpression> => {
        let mut l = l.expressions;
        l.push(x.0);
        ast::ExpressionList::new(l, x.1)
    },
    <x:SemicolonExpression> => {
        let mut l = Vec::new();
        l.push(x.0);
        ast::ExpressionList::new(l, x.1)
    },
}

SemicolonExpression: (ast::Expression, bool) = {
    <x:Expression> <n: MultipleSemicolons> => {
        (x, n > 1)
    }
}

MultipleSemicolons: u32 = {
    <h: MultipleSemicolons> ";"
        => h + 1,
    <n: ";">
        => 1,
}

pub Expression: ast::Expression = {
    DestructiveAssignment,
    LogicalOr,
}

DestructiveAssignment: ast::Expression = {
    <id:Identifier> <o:ColonEqualOperator> <e:Expression>
        => ast::Expression::new_destructive_assignment(id, o, e),
}

ColonEqualOperator: tokens::BinaryOperator = {
    <s: @L> ":=" <e: @R>
        => tokens::BinaryOperator::ColonEqual(tokens::TokenPosition::new(s, e)),
}

pub LogicalOr: ast::Expression = {
    <x:LogicalOr> <o:LogicalOrOperator> <y:LogicalAnd>
        => ast::Expression::new_binary_op(x, o, y),
    LogicalAnd
}

LogicalOrOperator: tokens::BinaryOperator = {
    <s: @L> "||" <e: @R>
        => tokens::BinaryOperator::Or(tokens::TokenPosition::new(s, e)),
}

pub LogicalAnd: ast::Expression = {
    <x:LogicalAnd> <o:LogicalAndOperator> <y:Equation>
        => ast::Expression::new_binary_op(x, o, y),
    Equation
}

LogicalAndOperator: tokens::BinaryOperator = {
    <s: @L> "&&" <e: @R>
        => tokens::BinaryOperator::And(tokens::TokenPosition::new(s, e)),
}

pub Equation: ast::Expression = {
    <x:Comparison> <o:EquationOperator> <y:Comparison>
        => ast::Expression::new_binary_op(x, o, y),
    Comparison
}

EquationOperator: tokens::BinaryOperator = {
    <s: @L> "==" <e: @R>
        => tokens::BinaryOperator::EqualEqual(tokens::TokenPosition::new(s, e)),
    <s: @L> "!=" <e: @R>
        => tokens::BinaryOperator::NotEqual(tokens::TokenPosition::new(s, e))
}

pub Comparison: ast::Expression = {
    <x:Addition> <o:ComparisonOperator> <y:Addition>
        => ast::Expression::new_binary_op(x, o, y),
    Addition
}

ComparisonOperator: tokens::BinaryOperator = {
    <s: @L> ">" <e: @R>
        => tokens::BinaryOperator::Greater(tokens::TokenPosition::new(s, e)),
    <s: @L> ">=" <e: @R>
        => tokens::BinaryOperator::GreaterEqual(tokens::TokenPosition::new(s, e)),
    <s: @L> "<" <e: @R>
        => tokens::BinaryOperator::Less(tokens::TokenPosition::new(s, e)),
    <s: @L> "<=" <e: @R>
        => tokens::BinaryOperator::LessEqual(tokens::TokenPosition::new(s, e)),
}

pub Addition: ast::Expression = {
    <x:Addition> <o:PlusMinusBinaryOp> <y:Term>
        => ast::Expression::new_binary_op(x, o, y),
    Term
}

PlusMinusBinaryOp: tokens::BinaryOperator = {
    <s: @L> "+" <e: @R>
        => tokens::BinaryOperator::Plus(tokens::TokenPosition::new(s, e)),
    <s: @L> "-" <e: @R>
        => tokens::BinaryOperator::Minus(tokens::TokenPosition::new(s, e)),
}

pub Term: ast::Expression = {
    <x:Term> <o:MultiplicationOperator> <y:Factor>
        => ast::Expression::new_binary_op(x, o, y),
    Factor
}

MultiplicationOperator: tokens::BinaryOperator = {
    <s: @L> "*" <e: @R>
        => tokens::BinaryOperator::Times(tokens::TokenPosition::new(s, e)),
    <s: @L> "/" <e: @R>
        => tokens::BinaryOperator::Divide(tokens::TokenPosition::new(s, e)),
    <s: @L> "%" <e: @R>
        => tokens::BinaryOperator::Modulo(tokens::TokenPosition::new(s, e)),
}

pub Factor: ast::Expression = {
    <x:Atom>
        => ast::Expression::new_atom(x),
}


pub Atom: ast::Atom = {
    <n:NumberLiteral> => 
        ast::Atom::NumberLiteral(n),
    <b:BooleanLiteral> =>
        ast::Atom::BooleanLiteral(b),
    <i:Identifier> => 
        ast::Atom::Variable(i),
    LetExpression,
    IfExpression,
    WhileExpression,
    GroupedExpression,
    PrintExpression,
    Block,
    UnaryOperation
}

LetExpression: ast::Atom = {
    <k: LetKeyword> <a:AssignmentList> <i:InKeyword> <e:Atom>
        => ast::Atom::new_let_expression(k, a, i, e),
}

Assignment: ast::Assignment = {
    <id:Identifier> <o:EqualOperator> <e:Expression>
        => ast::Assignment::new(id, o, e),
}

EqualOperator: tokens::BinaryOperator = {
    <s: @L> "=" <e: @R>
        => tokens::BinaryOperator::Equal(tokens::TokenPosition::new(s, e)),
}

AssignmentList: Vec<ast::Assignment> = {
    <h:AssignmentList> "," <t:Assignment>
        => {
            let mut h = h;
            h.push(t);
            h
        },
    <t:Assignment>
        => {
            let mut v = Vec::new();
            v.push(t);
            v
        },
}

IfExpression: ast::Atom = {
    <k:IfKeyword> "(" <c:Expression> ")" <x:Atom> <k2:ElseKeyword> <x2:Atom> 
        => ast::Atom::new_if_expression(k, c, x, k2, x2),
}

WhileExpression: ast::Atom = {
    <k:WhileKeyword> "(" <c:Expression> ")" <b:Block>
        => ast::Atom::new_while_expression(k, c, b),
}

Block: ast::Atom = {
    <k:OpenBrace> <e:ExpressionList> <k2:CloseBrace>
        => ast::Atom::new_block(k, e, k2),
}

GroupedExpression: ast::Atom = {
     "(" <e: Expression> ")"
        => ast::Atom::new_grouped_expression(e),
}


PlusMinusUnaryOp: tokens::UnaryOperator = {
    <s: @L> "+" <e: @R>
        => tokens::UnaryOperator::Plus(tokens::TokenPosition::new(s, e)),
    <s: @L> "-" <e: @R>
        => tokens::UnaryOperator::Minus(tokens::TokenPosition::new(s, e)),
}

UnaryOperation: ast::Atom = {
     <o:PlusMinusUnaryOp> <x:Atom>
        => ast::Atom::new_unary_op(o, x),
}

PrintExpression: ast::Atom = {
    <k: PrintKeyword> "(" <e:Expression> ")"
        => ast::Atom::new_print_expression(k, e),
}

OpenBrace: tokens::GroupingOperator = {
    <s: @L> "{" <e: @R>
        => tokens::GroupingOperator::OpenBrace(tokens::TokenPosition::new(s, e)),
}

CloseBrace: tokens::GroupingOperator = {
    <s: @L> "}" <e: @R>
        => tokens::GroupingOperator::CloseBrace(tokens::TokenPosition::new(s, e)),
}

LetKeyword: tokens::Keyword = {
    <s: @L> "let" <e: @R>
        => tokens::Keyword::Let(tokens::TokenPosition::new(s, e)),
}

InKeyword: tokens::Keyword = {
    <s: @L> "in" <e: @R>
        => tokens::Keyword::In(tokens::TokenPosition::new(s, e)),
}

IfKeyword: tokens::Keyword = {
    <s: @L> "if" <e: @R>
        => tokens::Keyword::If(tokens::TokenPosition::new(s, e)),
}

ElseKeyword: tokens::Keyword = {
    <s: @L> "else" <e: @R>
        => tokens::Keyword::Else(tokens::TokenPosition::new(s, e)),
}

ElifKeyword: tokens::Keyword = {
    <s: @L> "elif" <e: @R>
        => tokens::Keyword::Elif(tokens::TokenPosition::new(s, e)),
}

WhileKeyword: tokens::Keyword = {
    <s: @L> "while" <e: @R>
        => tokens::Keyword::While(tokens::TokenPosition::new(s, e)),
}

PrintKeyword: tokens::Keyword = {
    <s: @L> "print" <e: @R>
        => tokens::Keyword::Print(tokens::TokenPosition::new(s, e)),
}

Identifier: tokens::Identifier = {
    <s: @L> <i:r"[A-Za-z][A-Za-z_0-9]*"> <e: @R>
        => tokens::Identifier::new(s, e, i),
}

NumberLiteral: tokens::NumberLiteral = {
    <s: @L> <n:r"[0-9]+(\.[0-9]+)?"> <e: @R>
        => tokens::NumberLiteral::new(s, e, n),
}

BooleanLiteral: tokens::BooleanLiteral = {
    <s: @L> "true" <e: @R>
        => tokens::BooleanLiteral::new(s, e, true),
    <s: @L> "false" <e: @R>
        => tokens::BooleanLiteral::new(s, e, false),
}
